{
  "contractName": "Counters",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying '_value' is never directly accessed.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/libraries/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/src/contracts/libraries/Counters.sol\":{\"keccak256\":\"0x892f3720ad7bca0bc15cef96e11f1ffa2e6c994e9c4218d37c8061c09624d82c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e81d4aee6d2a26fdf0d7c7296020c3bb487fefb20b46b45f9cddd424a69cc27\",\"dweb:/ipfs/QmVEHWvcebLeq4zSdtrJPeTiqkr4DnfPh7Qi9HQCmddoZs\"]},\"project:/src/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x15f408ab35e22a9ac5aceb343bd9aa0e02891988f9bc195f495cdf613d0df380\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7660ed94011a932c35127bc3f975e8e1c32947399fb76db2aa3e6a49d061633f\",\"dweb:/ipfs/Qmcfgjeqk34A8j8Jn798AKnmwPaHNCsMMmy57v1R4Z9KaF\"]}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122031dbaeb49002e7817c6e72dfc697cb3aed0853e533ba0a16f37a48eef7c23bdc64736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122031dbaeb49002e7817c6e72dfc697cb3aed0853e533ba0a16f37a48eef7c23bdc64736f6c634300080d0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "655:858:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "655:858:11:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport './SafeMath.sol';\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying '_value' is never\n * directly accessed.\n */\n\n library Counters {\n    using SafeMath for uint256;\n\n    // build your own variable type with the keyword 'struct'\n    // is a mechanism to keep track of our values of arithmetic changes to our code\n    struct Counter {\n        uint256 _value;\n    }\n\n    // we want to find the current value of a count\n    // storage key word will store the state after fucntion execution\n    // memory key word will wipe the state after function execution\n    function current(Counter storage counter) internal view returns(uint256) {\n        return counter._value;\n    }\n\n    // function that always increment by 1\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    // function that always decrement by 1\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.subtract(1);\n    }\n }",
  "sourcePath": "/home/m9/Documents/nft-marketplace-starter-kit/src/contracts/libraries/Counters.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/libraries/Counters.sol",
    "exportedSymbols": {
      "Counters": [
        1391
      ],
      "SafeMath": [
        1528
      ]
    },
    "id": 1392,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1340,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:11"
      },
      {
        "absolutePath": "project:/src/contracts/libraries/SafeMath.sol",
        "file": "./SafeMath.sol",
        "id": 1341,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1392,
        "sourceUnit": 1529,
        "src": "57:24:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Counters",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1342,
          "nodeType": "StructuredDocumentation",
          "src": "83:569:11",
          "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying '_value' is never\n directly accessed."
        },
        "fullyImplemented": true,
        "id": 1391,
        "linearizedBaseContracts": [
          1391
        ],
        "name": "Counters",
        "nameLocation": "663:8:11",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 1345,
            "libraryName": {
              "id": 1343,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1528,
              "src": "684:8:11"
            },
            "nodeType": "UsingForDirective",
            "src": "678:27:11",
            "typeName": {
              "id": 1344,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "697:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Counters.Counter",
            "id": 1348,
            "members": [
              {
                "constant": false,
                "id": 1347,
                "mutability": "mutable",
                "name": "_value",
                "nameLocation": "890:6:11",
                "nodeType": "VariableDeclaration",
                "scope": 1348,
                "src": "882:14:11",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1346,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "882:7:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nameLocation": "864:7:11",
            "nodeType": "StructDefinition",
            "scope": 1391,
            "src": "857:46:11",
            "visibility": "public"
          },
          {
            "body": {
              "id": 1359,
              "nodeType": "Block",
              "src": "1172:38:11",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 1356,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1351,
                      "src": "1189:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                        "typeString": "struct Counters.Counter storage pointer"
                      }
                    },
                    "id": 1357,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "_value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 1347,
                    "src": "1189:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1355,
                  "id": 1358,
                  "nodeType": "Return",
                  "src": "1182:21:11"
                }
              ]
            },
            "id": 1360,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "current",
            "nameLocation": "1108:7:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1352,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1351,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1132:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1360,
                  "src": "1116:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 1350,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1349,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1348,
                      "src": "1116:7:11"
                    },
                    "referencedDeclaration": 1348,
                    "src": "1116:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1115:25:11"
            },
            "returnParameters": {
              "id": 1355,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1354,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1360,
                  "src": "1163:7:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1353,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1163:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1162:9:11"
            },
            "scope": 1391,
            "src": "1099:111:11",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1372,
              "nodeType": "Block",
              "src": "1312:36:11",
              "statements": [
                {
                  "expression": {
                    "id": 1370,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1366,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1363,
                        "src": "1322:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 1368,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1347,
                      "src": "1322:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 1369,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1340:1:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1322:19:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1371,
                  "nodeType": "ExpressionStatement",
                  "src": "1322:19:11"
                }
              ]
            },
            "id": 1373,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increment",
            "nameLocation": "1268:9:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1363,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1294:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1373,
                  "src": "1278:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 1362,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1361,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1348,
                      "src": "1278:7:11"
                    },
                    "referencedDeclaration": 1348,
                    "src": "1278:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1277:25:11"
            },
            "returnParameters": {
              "id": 1365,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1312:0:11"
            },
            "scope": 1391,
            "src": "1259:89:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1389,
              "nodeType": "Block",
              "src": "1450:60:11",
              "statements": [
                {
                  "expression": {
                    "id": 1387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1379,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1376,
                        "src": "1460:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 1381,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1347,
                      "src": "1460:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 1385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1501:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 1382,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1376,
                            "src": "1477:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 1383,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1347,
                          "src": "1477:14:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1384,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "subtract",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1443,
                        "src": "1477:23:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 1386,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1477:26:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1460:43:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1388,
                  "nodeType": "ExpressionStatement",
                  "src": "1460:43:11"
                }
              ]
            },
            "id": 1390,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decrement",
            "nameLocation": "1406:9:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1377,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1376,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1432:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 1390,
                  "src": "1416:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 1375,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1374,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1348,
                      "src": "1416:7:11"
                    },
                    "referencedDeclaration": 1348,
                    "src": "1416:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1348_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1415:25:11"
            },
            "returnParameters": {
              "id": 1378,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1450:0:11"
            },
            "scope": 1391,
            "src": "1397:113:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1392,
        "src": "655:858:11",
        "usedErrors": []
      }
    ],
    "src": "32:1481:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-04-25T12:46:11.530Z",
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying '_value' is never directly accessed.",
    "kind": "dev",
    "methods": {},
    "title": "Counters",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}