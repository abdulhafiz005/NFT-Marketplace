{"ast":null,"code":"import _toConsumableArray from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/m9/Documents/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (!provider) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                window.web3 = new Web3(provider);\n                _context2.next = 7;\n                return this.loadBlockchainData();\n\n              case 7:\n                _context2.next = 10;\n                break;\n\n              case 9:\n                // no ethereum provider\n                console.log('no ethereum wallet detected.');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.requestAccounts();\n\n              case 3:\n                _context3.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                _context3.next = 9;\n                return web3.eth.net.getId();\n\n              case 9:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 18;\n                return this.state.contract.methods.totalSupply().call();\n\n              case 18:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 0;\n\n              case 21:\n                if (!(i < totalSupply)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 24;\n                return contract.methods.KryptoBird(i).call();\n\n              case 24:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(kryptoBirdz), [_KryptoBird])\n                });\n\n              case 26:\n                i++;\n                _context3.next = 21;\n                break;\n\n              case 29:\n                console.log(this.state);\n                _context3.next = 33;\n                break;\n\n              case 32:\n                window.alert('Smart Contract not deployed.');\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Krypto Birdz NFTS (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nave-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/m9/Documents/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","provider","window","web3","loadBlockchainData","console","log","eth","requestAccounts","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","state","methods","totalSupply","call","i","kryptoBirdz","alert","props","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nclass App extends Component {\n\n     async componentDidMount(){\n         await this.loadWeb3();\n     }\n\n    // first up is to detect ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        // modern browsers\n        // if there is a provider then\n        // lets log its working and access\n        // the window from the doc to set\n        // Web3 to the provider\n\n        if(provider) {\n            window.web3 = new Web3(provider);\n            await this.loadBlockchainData();\n        }else{\n            // no ethereum provider\n            console.log('no ethereum wallet detected.');\n        }\n    }\n\n    async loadBlockchainData(){\n        const web3 = window.web3;\n        await web3.eth.requestAccounts();\n        const accounts = await web3.eth.getAccounts();\n        this.setState({account: accounts});\n\n        const networkId = await web3.eth.net.getId();\n        const networkData = KryptoBird.networks[networkId]\n\n        if(networkData) {\n            const abi = KryptoBird.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            this.setState({contract});\n            \n            const totalSupply = await this.state.contract.methods.totalSupply().call();\n            this.setState({totalSupply});\n\n            for(i = 0; i < totalSupply; i++){\n                const KryptoBird = await contract.methods.KryptoBird(i).call();\n                this.setState({\n                    kryptoBirdz: [...kryptoBirdz, KryptoBird]\n                });\n            }\n\n            console.log(this.state);\n        }else {\n            window.alert('Smart Contract not deployed.');\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            kryptoBirdz: [],\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                    <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\n                        Krypto Birdz NFTS (Non Fungible Tokens)\n                    </div>\n                    <ul className=\"navbar-nav px-3\">\n                        <li className=\"nave-item text-nowrap d-none d-sm-none d-sm-block\">\n                            <small className=\"text-white\">\n                                {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}