{"ast":null,"code":"import _toConsumableArray from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/m9/Documents/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/m9/Documents/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (!provider) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                window.web3 = new Web3(provider);\n                _context2.next = 7;\n                return this.loadBlockchainData();\n\n              case 7:\n                _context2.next = 10;\n                break;\n\n              case 9:\n                // no ethereum provider\n                window.alert('no ethereum wallet detected.');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"transferToken\",\n    value: function () {\n      var _transferToken = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(tokenId) {\n        var web3, nonce, value, transaction, signTrx;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // get nonce\n\n                _context3.next = 3;\n                return web3.eth.getTransactionCount(this.state.account, \"latest\");\n\n              case 3:\n                nonce = _context3.sent;\n                // convert ETH to wei\n                value = web3.utils.toWei(this.state.kryptoCosts[tokenId], \"Ether\"); // prepare transaction. fields - to, value, gasPrice, gasLimit, nonce\n\n                transaction = {\n                  'to': this.state.contract.methods.ownerOf(tokenId),\n                  'value': value,\n                  'gasLimit': 6721975,\n                  'gasPrice': 20000000000,\n                  'nonce': nonce //create signed transaction\n\n                };\n                _context3.next = 8;\n                return web3.eth.accounts.signTransaction(transaction, 'PrivateKey');\n\n              case 8:\n                signTrx = _context3.sent;\n                //send signed transaction\n                web3.eth.sendSignedTransaction(signTrx.rawTransaction, function (error, hash) {\n                  if (error) {\n                    console.log('something went wrong', error);\n                  } else {\n                    console.log('transaction submitted', hash);\n                  }\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function transferToken(_x) {\n        return _transferToken.apply(this, arguments);\n      }\n\n      return transferToken;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird, KryptoName, KryptoDesc, KryptoCost;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                web3 = window.web3;\n                _context4.next = 3;\n                return web3.eth.requestAccounts();\n\n              case 3:\n                _context4.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context4.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context4.next = 9;\n                return web3.eth.net.getId();\n\n              case 9:\n                networkId = _context4.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context4.next = 40;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context4.next = 18;\n                return this.state.contract.methods.totalSupply().call();\n\n              case 18:\n                totalSupply = _context4.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 0;\n\n              case 21:\n                if (!(i < totalSupply)) {\n                  _context4.next = 38;\n                  break;\n                }\n\n                _context4.next = 24;\n                return this.state.contract.methods.kryptoBirdz(i).call();\n\n              case 24:\n                _KryptoBird = _context4.sent;\n                _context4.next = 27;\n                return this.state.contract.methods.tokenName(i).call();\n\n              case 27:\n                KryptoName = _context4.sent;\n                _context4.next = 30;\n                return this.state.contract.methods.tokenDescription(i).call();\n\n              case 30:\n                KryptoDesc = _context4.sent;\n                _context4.next = 33;\n                return this.state.contract.methods.tokenCost(i).call();\n\n              case 33:\n                KryptoCost = _context4.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird]),\n                  kryptoNames: [].concat(_toConsumableArray(this.state.kryptoNames), [KryptoName]),\n                  kryptoDescs: [].concat(_toConsumableArray(this.state.kryptoDescs), [KryptoDesc]),\n                  kryptoCosts: [].concat(_toConsumableArray(this.state.kryptoCosts), [KryptoCost])\n                });\n\n              case 35:\n                i++;\n                _context4.next = 21;\n                break;\n\n              case 38:\n                _context4.next = 41;\n                break;\n\n              case 40:\n                window.alert('Smart Contract not deployed.');\n\n              case 41:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"checkOwnerOf\",\n    value: function () {\n      var _checkOwnerOf = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(tokenId) {\n        var owner;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.state.contract.methods.ownerOf(tokenId).call();\n\n              case 2:\n                owner = _context5.sent;\n                console.log(owner);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function checkOwnerOf(_x2) {\n        return _checkOwnerOf.apply(this, arguments);\n      }\n\n      return checkOwnerOf;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird, kryptoName, kryptoDesc, kryptoCost) {\n      _this.state.contract.methods.mint(kryptoBird, kryptoName, kryptoDesc, kryptoCost).send({\n        from: _this.state.account\n      }).once('Receipt', function (Receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [kryptoBird]),\n          kryptoNames: [].concat(_toConsumableArray(_this.state.kryptoNames), [kryptoName]),\n          kryptoDescs: [].concat(_toConsumableArray(_this.state.kryptoDescs), [kryptoDesc]),\n          kryptoCosts: [].concat(_toConsumableArray(_this.state.kryptoCost), [kryptoCost])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: [],\n      kryptoNames: [],\n      kryptoDescs: [],\n      kryptoCosts: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-filled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, console.log(this.state), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"NFTS (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nave-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          marginTop: '40px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"NFT Marketplace\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n\n          _this2.mint(_this2.kryptoBird.value, _this2.kryptoName.value, _this2.kryptoDesc.value, _this2.kryptoCost.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Token URL\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        className: \"form-control mb-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Token Name\",\n        ref: function ref(input) {\n          return _this2.kryptoName = input;\n        },\n        className: \"form-control mb-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Token Description\",\n        ref: function ref(input) {\n          return _this2.kryptoDesc = input;\n        },\n        className: \"form-control mb-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"number\",\n        placeholder: \"Token Cost In ETH\",\n        ref: function ref(input) {\n          return _this2.kryptoCost = input;\n        },\n        className: \"form-control mb-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Mint\",\n        className: \"form-control btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(MDBCardImage, {\n          className: \"img\",\n          src: kryptoBird,\n          position: \"top\",\n          height: \"250rem\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, \" \", _this2.state.kryptoNames[key], \" \"), React.createElement(MDBCardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, \" \", _this2.state.kryptoDescs[key], \" \"), React.createElement(MDBBtn, {\n          class: \"form-control btn-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, _this2.state.kryptoCosts[key], \" ETH\")))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/m9/Documents/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","provider","window","web3","loadBlockchainData","alert","tokenId","eth","getTransactionCount","state","account","nonce","value","utils","toWei","kryptoCosts","transaction","contract","methods","ownerOf","accounts","signTransaction","signTrx","sendSignedTransaction","rawTransaction","error","hash","console","log","requestAccounts","getAccounts","setState","net","getId","networkId","networkData","networks","abi","address","Contract","totalSupply","call","i","kryptoBirdz","tokenName","KryptoName","tokenDescription","KryptoDesc","tokenCost","KryptoCost","kryptoNames","kryptoDescs","owner","props","mint","kryptoBird","kryptoName","kryptoDesc","kryptoCost","send","from","once","Receipt","color","opacity","marginTop","event","preventDefault","input","map","key","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\nimport './App.css';\n\nclass App extends Component {\n\n     async componentDidMount(){\n         await this.loadWeb3();\n     }\n\n    // first up is to detect ethereum provider\n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        // modern browsers\n        // if there is a provider then\n        // lets log its working and access\n        // the window from the doc to set\n        // Web3 to the provider\n\n        if(provider) {\n            window.web3 = new Web3(provider);\n            await this.loadBlockchainData();\n        }else{\n            // no ethereum provider\n            window.alert('no ethereum wallet detected.');\n        }\n    }\n\n    async transferToken(tokenId){\n        const web3 = window.web3;\n        // get nonce\n        const nonce = await web3.eth.getTransactionCount(this.state.account, \"latest\");\n        // convert ETH to wei\n        const value = web3.utils.toWei(this.state.kryptoCosts[tokenId], \"Ether\");\n\n        // prepare transaction. fields - to, value, gasPrice, gasLimit, nonce\n        const transaction = {\n            'to': this.state.contract.methods.ownerOf(tokenId),\n            'value': value,\n            'gasLimit': 6721975,\n            'gasPrice': 20000000000,\n            'nonce': nonce\n        }\n\n        //create signed transaction\n        const signTrx = await web3.eth.accounts.signTransaction(transaction, 'PrivateKey');\n        \n        //send signed transaction\n        web3.eth.sendSignedTransaction(signTrx.rawTransaction, function(error, hash){\n            if(error){\n                console.log('something went wrong', error);\n            }else{\n                console.log('transaction submitted', hash);\n            }\n        });\n    }\n\n    async loadBlockchainData(){\n        const web3 = window.web3;\n        await web3.eth.requestAccounts();\n        const accounts = await web3.eth.getAccounts();\n        this.setState({account: accounts[0]});\n\n        const networkId = await web3.eth.net.getId();\n        const networkData = KryptoBird.networks[networkId]\n\n        if(networkData) {\n            const abi = KryptoBird.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            this.setState({contract});\n            \n            const totalSupply = await this.state.contract.methods.totalSupply().call();\n            this.setState({totalSupply});\n\n            for(let i = 0; i < totalSupply; i++){\n                const KryptoBird = await this.state.contract.methods.kryptoBirdz(i).call();\n                const KryptoName = await this.state.contract.methods.tokenName(i).call();\n                const KryptoDesc = await this.state.contract.methods.tokenDescription(i).call();\n                const KryptoCost = await this.state.contract.methods.tokenCost(i).call();\n\n                this.setState({\n                    kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird],\n                    kryptoNames: [...this.state.kryptoNames, KryptoName],\n                    kryptoDescs: [...this.state.kryptoDescs, KryptoDesc],\n                    kryptoCosts: [...this.state.kryptoCosts, KryptoCost],\n                });\n            }\n        }else {\n            window.alert('Smart Contract not deployed.');\n        }\n    }\n\n    async checkOwnerOf(tokenId) {\n        const owner = await this.state.contract.methods.ownerOf(tokenId).call();\n        console.log(owner);\n    }\n\n    mint = (kryptoBird, kryptoName, kryptoDesc, kryptoCost) => {\n        this.state.contract.methods.mint(kryptoBird, kryptoName, kryptoDesc, kryptoCost).send({from: this.state.account}).once('Receipt', (Receipt) => {\n            this.setState({\n                kryptoBirdz: [...this.state.kryptoBirdz, kryptoBird],\n                kryptoNames: [...this.state.kryptoNames, kryptoName],\n                kryptoDescs: [...this.state.kryptoDescs, kryptoDesc],\n                kryptoCosts: [...this.state.kryptoCost, kryptoCost],\n            });\n        });\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            kryptoBirdz: [],\n            kryptoNames: [],\n            kryptoDescs: [],\n            kryptoCosts: [],\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"container-filled\">\n                {console.log(this.state)}\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                    <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\n                        NFTS (Non Fungible Tokens)\n                    </div>\n                    <ul className=\"navbar-nav px-3\">\n                        <li className=\"nave-item text-nowrap d-none d-sm-none d-sm-block\">\n                            <small className=\"text-white\">\n                                {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n\n                <div className=\"container-fluid mt-1\">\n                    <div className=\"row\">\n                        <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n                            <div className=\"content mr-auto ml-auto\" style={{opacity:'0.8'}}>\n                                <h1 style={{marginTop:'40px'}}>NFT Marketplace</h1>\n                                <form onSubmit={(event) => {\n                                    event.preventDefault();\n                                    this.mint(this.kryptoBird.value, this.kryptoName.value, this.kryptoDesc.value, this.kryptoCost.value);\n                                }}>\n                                    <input type=\"text\" placeholder=\"Enter Token URL\" ref={(input) => this.kryptoBird = input} className=\"form-control mb-1\"/>\n                                    <input type=\"text\" placeholder=\"Token Name\" ref={(input) => this.kryptoName = input} className=\"form-control mb-1\"/>\n                                    <input type=\"text\" placeholder=\"Token Description\" ref={(input) => this.kryptoDesc = input} className=\"form-control mb-1\"/>\n                                    <input type=\"number\" placeholder=\"Token Cost In ETH\" ref={(input) => this.kryptoCost = input} className=\"form-control mb-1\"/>\n                                    <input type=\"submit\" value=\"Mint\" className=\"form-control btn btn-primary\"/>\n                                </form>\n                            </div>\n                        </main>\n                    </div>\n                        <hr />\n                        <div className=\"row textCenter\">\n                            {this.state.kryptoBirdz.map((kryptoBird, key) => {\n                                return(\n                                    <div>\n                                        <div>\n                                        <MDBCard className='token' style={{maxWidth:'22rem'}}>\n                                            <MDBCardImage className='img' src={kryptoBird} position='top' height='250rem' style={{marginRight: '4px'}}/>\n                                            <MDBCardBody>\n                                                <MDBCardTitle> {this.state.kryptoNames[key]} </MDBCardTitle>\n                                                <MDBCardText> {this.state.kryptoDescs[key]} </MDBCardText>\n                                                <MDBBtn class=\"form-control btn-primary\">{this.state.kryptoCosts[key]} ETH</MDBBtn>\n                                            </MDBCardBody>\n                                        </MDBCard>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}